1:  npm i -g @nestjs/cli
2: nest new project-name
3: add em prettierrc "semi":false pra remover o ";" dos arquivos

START REST API NEST JS

4: criar module/product/product.controller.ts export a class controller e dar um nome ao Controller products que é a ROTA

5: Criar dentro de SRC module/product/product.module.ts importar product.controller.ts e  e export o ProductModule



6:em app.module.ts importar o productModule

7: criar module/product/product.service.ts

8: importar o product.service em product.module.ts como providers:[ProductService]

9: chamar o productService dentro da função  ProductControllers como a mesma está em providers era rodará

PROVIDERS 

10: criar em SRC database/mysql.provider

11: adicionar o MySQLProvider em modules/product.module.ts em providers

12: EM product.service.ts add o contrutor pra injeta a dependencia mysql: "constructor(private readonly mysql: MySQLProvider){}"

13: inserir test 

ADD MySQL 

14: npm install mysql2

15: npm install --save-dev types/mysql2

16: em mysql.provider.ts criar o import do createPool, Pool  depois passar o createPool no constructor

17: deixar o o getValue() async passando a Promise<string> em seguida chamando o getConnection(), em seguida estanciar uma query sql e chamar
no vavegador pra ver se retornar

18: criar database.module.ts que será responsável por servir de modelo

***CRUD***

19: criar module/product/product.entity.ts passando o modelo Product contendo price,  product e id, depois passar exportar pra product.service.ts usando esse model pra puxar os dados do banco sql atravez de um JSON em seguida exportar pra   product.controller.ts  OBS: passar os dados chamdos do DB por JSON em todos os controllers(CRUD) pra que possam ser interpretados pelo navegador EX:
  product.controller.ts
        const [results] = await conn.query('select * from products')
        const resultsPlain = JSON.parse(JSON.stringify(results))

GET ALL PRODUCT

20:Em product.controller.ts passa a rota findAll() com o @Get() vazio que por padrão é '/', em seguida criar em product.service.ts a lógica usando a query pra buscar os dados no DB em seguida convertendo os dados em JSON, depois fazer um .map() disso retonando a consulta atrela ao product.entity que é o model do dados e por ultimo o return

GET PRODUCT BY ID


20: Em product.controller.ts passar a rota findById() com o @Get(':id') passando tambem o @Param tipado pra busacr o produto cujo o id for declarado   na consulta, em seguida em product.service construir a lógica da mesma forma da anterior entretanto mudando um detalhe na query que é deixar o id dinamico passando ele depois: ('select * from products where id = ?', [id])

CREATEPRODUCT

21: Em product.service.ts criar o create com o parãmetro entity: Product, passar a query de criação sql passando o [entity.produt entity.pric] depois da query pra ficar dinamico

22: em seguida em product.controller passar o metodo @Post() e passar a rota create com o parãmetro @Body() Product, em seguida dar o retorn com a função create que esta em product.service com o parmatreo (product) que é o models que esta em entity.product.ts

DELETE PRODUCT

23: EM product.controller criar metodo @Delete(':id') passando o id praq ser declardo dinamicamente, com a função remove(@Param('id')) importada de product.service com o retorno da função remove em product.service.ts

24:
Em product.controller.ts crai a função remove chamdno a query sql passando tambem o id depois da query pra deixa ela dinamica, em seguida dar um return do tipo bollean: true