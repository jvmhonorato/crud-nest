1:  npm i -g @nestjs/cli
2: nest new project-name
3: add em prettierrc "semi":false pra remover o ";" dos arquivos

START REST API NEST JS

4: criar module/product/product.controller.ts export a class controller e dar um nome ao Controller products que é a ROTA

5: Criar dentro de SRC module/product/product.module.ts importar product.controller.ts e  e export o ProductModule



6:em app.module.ts importar o productModule

7: criar module/product/product.service.ts

8: importar o product.service em product.module.ts como providers:[ProductService]

9: chamar o productService dentro da função  ProductControllers como a mesma está em providers era rodará

PROVIDERS 

10: criar em SRC database/mysql.provider

11: adicionar o MySQLProvider em modules/product.module.ts em providers

12: EM product.service.ts add o contrutor pra injeta a dependencia mysql: "constructor(private readonly mysql: MySQLProvider){}"

13: inserir test 

ADD MySQL 

14: npm install mysql2

15: npm install --save-dev types/mysql2

16: em mysql.provider.ts criar o import do createPool, Pool  depois passar o createPool no constructor

17: deixar o o getValue() async passando a Promise<string> em seguida chamando o getConnection(), em seguida estanciar uma query sql e chamar
no vavegador pra ver se retornar

18: criar database.module.ts que será responsável por servir de modelo

19: criar module/product/product.entity.ts que é uma entidade que representa uma classe que foi pro banco, nela usando o findAll() pra buscar todos os dados do banco de dados. OBS: passar os dados chamdos do DB por JSON pra que possam ser interpretados pelo navegador EX:
        const [results] = await conn.query('select * from products')
        const resultsPlain = JSON.parse(JSON.stringify(results))

 20:       